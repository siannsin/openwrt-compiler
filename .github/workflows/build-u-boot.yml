name: Build U-Boot

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      openwrt_branch:
        description: "Select openwrt branch"
        required: true
        default: "u-boot"
        type: choice
        options:
          - u-boot
      device_branch:
        description: "Select device branch"
        required: true
        default: "all"
        type: choice
        options:
          - all
          - ax3000t

env:
  TZ: Asia/Shanghai
  openwrt_branch: ${{ inputs.openwrt_branch }}
  device_branch: ${{ inputs.device_branch }}

jobs:
  build:
    name: Build U-Boot
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set environment variable (${{ inputs.openwrt_branch }})
        id: var
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"

          # ========== Set repo branch ==========
          repo_diy="https://github.com/$GITHUB_REPOSITORY"
          repo_diy_owner="$GITHUB_REPOSITORY_OWNER"

          repo_target="https://github.com/hanwckf/bl-mt798x"
          repo_target_branch="master"
          repo_name="bl-mt798x"

          echo "repo_diy=${repo_diy}" >> "$GITHUB_ENV"
          echo "repo_diy_owner=${repo_diy_owner}" >> "$GITHUB_ENV"

          echo "repo_target=${repo_target}" >> "$GITHUB_ENV"
          echo "repo_target_branch=${repo_target_branch}" >> "$GITHUB_ENV"
          echo "repo_name=${repo_name}" >> "$GITHUB_ENV"

          # ========== Build Path ==========
          dir_build="builder"
          dir_output="output"
          dir_backup="backup"
          dir_diy="DIY"
          # ---------- / ----------
          path_build="/${dir_build}"
          path_openwrt="${path_build}/${openwrt_branch}"
          path_output="${path_build}/${dir_output}"
          path_backup="${path_build}/${dir_backup}"

          path_diy="${path_openwrt}/${dir_diy}"
          path_diy_branch="${path_diy}/${openwrt_branch}"

          echo "path_build=${path_build}" >> "$GITHUB_ENV"
          echo "path_openwrt=${path_openwrt}" >> "$GITHUB_ENV"
          echo "path_output=${path_output}" >> "$GITHUB_ENV"
          echo "path_backup=${path_backup}" >> "$GITHUB_ENV"

          echo "path_diy=${path_diy}" >> "$GITHUB_ENV"
          echo "path_diy_branch=${path_diy_branch}" >> "$GITHUB_ENV"

          # ========== DIY Files ==========
          # diy_config="${path_diy_branch}/${device_branch}.config"
          # diy_feeds="${path_diy_branch}/feeds.conf.default"
          # diy_p1_sh="${path_diy_branch}/diy-part1.sh"
          # diy_p2_sh="${path_diy_branch}/diy-part2.sh"
          # diy_files="${path_diy_branch}/files"
          release_md="${path_diy_branch}/release.md"

          # echo "diy_config=${diy_config}" >> "$GITHUB_ENV"
          # echo "diy_feeds=${diy_feeds}" >> "$GITHUB_ENV"
          # echo "diy_p1_sh=${diy_p1_sh}" >> "$GITHUB_ENV"
          # echo "diy_p2_sh=${diy_p2_sh}" >> "$GITHUB_ENV"
          # echo "diy_files=${diy_files}" >> "$GITHUB_ENV"
          echo "release_md=${release_md}" >> "$GITHUB_ENV"

          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Check environment variable
        id: checkenv
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          echo -e "# ========== Repo Info =========="
          echo -e "repo_diy: ${repo_diy}"
          echo -e "repo_diy_owner: ${repo_diy_owner}"
          echo -e "repo_target: ${repo_target}"
          echo -e "repo_target_branch: ${repo_target_branch}"
          echo -e "repo_name: ${repo_name}"
          echo -e "# ========== Build Path =========="
          echo -e "path_build: ${path_build}"
          echo -e "path_openwrt: ${path_openwrt}"
          echo -e "path_output: ${path_output}"
          echo -e "path_backup: ${path_backup}"
          echo -e "path_diy: ${path_diy}"
          echo -e "path_diy_branch: ${path_diy_branch}"
          echo -e "release_md: ${release_md}"
          # ========== END ==========
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clear environment
        id: clearinit
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          # 删除docker所有镜像
          docker rmi $(docker images -q) 2>/dev/null
          # 如果环境变量 AGENT_TOOLSDIRECTORY 不为空，则删除该目录及其所有内容
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          # 删除指定的目录及其所有内容，忽略所有错误信息
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          # 关闭所有交换空间 删除指定的交换文件
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        working-directory: /
        run: |
          echo -e "Current working directory: $(pwd)"
          # 更新 Ubuntu 的软件包列表
          sudo -E apt-get -y -qq update
          # 删除指定的软件包及其配置文件。如果删除失败，则忽略错误
          sudo -E apt-get -y -qq purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          # 下载并安装指定 URL 中列出的软件包 https://is.gd/depend_ubuntu2204_openwrt
          sudo -E apt-get -y install \
          ack \
          antlr3 \
          asciidoc \
          autoconf \
          automake \
          autopoint \
          binutils \
          bison \
          build-essential \
          bzip2 \
          ccache \
          clang \
          clangd \
          cmake \
          cpio \
          curl \
          device-tree-compiler \
          ecj \
          fastjar \
          flex \
          gawk \
          gettext \
          gcc-multilib \
          g++-multilib \
          git \
          gperf \
          haveged \
          help2man \
          intltool \
          lib32gcc-s1 \
          libc6-dev-i386 \
          libelf-dev \
          libglib2.0-dev \
          libgmp3-dev \
          libltdl-dev \
          libmpc-dev \
          libmpfr-dev \
          libncurses5-dev \
          libncursesw5 \
          libncursesw5-dev \
          libreadline-dev \
          libssl-dev \
          libtool \
          lld \
          lldb \
          lrzsz \
          mkisofs \
          msmtp \
          nano \
          ninja-build \
          p7zip \
          p7zip-full \
          patch \
          pkgconf \
          python3 \
          python3-distutils \
          python3-docutils \
          python3-pip \
          python3-ply \
          qemu-utils \
          re2c \
          rsync \
          scons \
          squashfs-tools \
          subversion \
          swig \
          texinfo \
          uglifyjs \
          unzip \
          vim \
          wget \
          xmlto \
          xxd \
          zlib1g-dev \
          libdb++-dev
          # arm-gcc工具链
          sudo -E apt-get -y -qq install gcc-aarch64-linux-gnu build-essential flex bison libssl-dev
          # 删除所有不再需要的软件包及其配置文件, 清理 apt 的缓存
          sudo -E apt-get -qq -y autoremove --purge
          sudo -E apt-get -qq clean
          # 从 root 用户的 .bashrc 和 .profile 文件中删除包含 NVM_DIR 和 skel 的行
          # sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          # 删除指定的目录及其所有内容
          # sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          # 设置系统的时区为环境变量 TZ 指定的值
          sudo timedatectl set-timezone "${TZ}"
          # 重新加载 systemd 的配置
          sudo -E systemctl daemon-reload
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create simulated physical disk
        id: disk
        working-directory: /
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"
          # 计算 /mnt 分区的可用空间（减去 1GB 作为缓冲）, 计算根分区的可用空间（减去 4GB 作为缓冲）
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          # 创建一个大小为 mnt_size 的文件 /mnt/mnt.img, 创建一个大小为 root_size 的文件 /root.img
          sudo truncate -s "${mnt_size}"G /mnt/mnt.img
          sudo truncate -s "${root_size}"G /root.img
          # 将这两个文件关联到 loop 设备, 在这两个 loop 设备上创建物理卷, 创建一个名为 github 的卷组，包含这两个物理卷
          sudo losetup /dev/loop6 /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img
          sudo pvcreate /dev/loop6
          sudo pvcreate /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7

          # 在 github 卷组上创建一个名为 runner 的逻辑卷，使用所有可用空间, 在 runner 逻辑卷上创建一个 XFS 文件系统
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          # 创建一个挂载点 ${path_build}, 将 runner 逻辑卷挂载到 ${path_build}, 将 ${path_build} 的所有者和组更改为 runner
          sudo mkdir -p ${path_build}
          sudo mount /dev/github/runner ${path_build}
          sudo chown -R runner.runner ${path_build}

          df -Th
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Clone Target Repository
        id: clonesys
        working-directory: ${{ env.path_build }}
        if: ${{ steps.disk.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          git clone ${repo_target} ${path_openwrt} --single-branch --depth=1 --branch=${repo_target_branch} 
          echo -e "repo_target: [ ${repo_target} ]\nBRANCH: [ ${repo_target_branch} ]"

          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Backup Target Repository
        id: backup
        working-directory: ${{ env.path_build }}
        if: ${{ steps.clonesys.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          echo "Backup path: ${path_backup}"
          mkdir -p ${path_backup}
          cp -rf ${path_openwrt} ${path_backup}
          ls -al ${path_backup}

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile U-Boot Cycle
        id: compile
        if: ${{ steps.clonesys.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          mkdir -p ${path_output}

          # BOARD SOC
          declare -A BOARD_PARAMS
          BOARD_PARAMS=(
            ["wr30u"]="mt7981"
            ["ax3000t"]="mt7981"
            ["redmi_ax6000"]="mt7986"
          )

          # ========== MULTI_LAYOUT off ==========
          arg_MULTI_LAYOUT="0"
          arg_FIXED_MTDPARTS="1"

          echo -e "========== MULTI_LAYOUT=${arg_MULTI_LAYOUT} FIXED_MTDPARTS=${arg_FIXED_MTDPARTS} =========="
          for BOARD in "${!BOARD_PARAMS[@]}"; do
            # 获取 BOARD 的参数
            PARAMS=(${BOARD_PARAMS[$BOARD]})
            arg_SOC=${PARAMS[0]}

            # 获取备份target项目
            cd ${path_build}
            rm -rf ${path_openwrt}
            cp -rf ${path_backup}/${openwrt_branch} ${path_build}
            # 切换到编译目录
            cd ${path_openwrt}
            echo -e "Current working directory: $(pwd)"
            # 为每个 BOARD 生成 U-Boot
            echo -e "---------- Compile U-Boot of ${BOARD} ----------"
            SOC=${arg_SOC} BOARD=${BOARD} MULTI_LAYOUT=${arg_MULTI_LAYOUT} FIXED_MTDPARTS=${arg_FIXED_MTDPARTS} ./build.sh
            # 将生成结果复制到Output
            cp -rf ./output/* ${path_output}
          done

          # ========== MULTI_LAYOUT on ==========
          arg_MULTI_LAYOUT="1"
          arg_FIXED_MTDPARTS="1"

          BOARD_PARAMS=(
            ["wr30u"]="mt7981"
            ["ax3000t"]="mt7981"
            ["redmi_ax6000"]="mt7986"
          )

          echo -e "========== MULTI_LAYOUT=${arg_MULTI_LAYOUT} FIXED_MTDPARTS=${arg_FIXED_MTDPARTS} =========="
          for BOARD in "${!BOARD_PARAMS[@]}"; do
            # 获取 BOARD 的参数
            PARAMS=(${BOARD_PARAMS[$BOARD]})
            arg_SOC=${PARAMS[0]}

            # 获取备份target项目
            cd ${path_build}
            rm -rf ${path_openwrt}
            cp -rf ${path_backup}/${openwrt_branch} ${path_build}
            # 切换到编译目录
            cd ${path_openwrt}
            echo -e "Current working directory: $(pwd)"
            # 为每个 BOARD 生成 U-Boot
            echo -e "---------- Compile U-Boot of ${BOARD} ----------"
            SOC=${arg_SOC} BOARD=${BOARD} MULTI_LAYOUT=${arg_MULTI_LAYOUT} FIXED_MTDPARTS=${arg_FIXED_MTDPARTS} ./build.sh
            # 将生成结果复制到Output
            cp -rf ./output/* ${path_output}
          done

          # eg: SOC=mt7981 BOARD=360t7 ./build.sh
          # eg: SOC=mt7981 BOARD=wr30u MULTI_LAYOUT=1 ./build.sh
          # eg: SOC=mt7981 BOARD=cmcc_rax3000m-emmc ./build.sh
          # eg: SOC=mt7986 BOARD=redmi_ax6000 MULTI_LAYOUT=1 ./build.sh
          # eg: SOC=mt7986 BOARD=jdcloud_re-cp-03 ./build.sh
          # Usage: SOC=[mt7981|mt7986] BOARD=<board name> MULTI_LAYOUT=[0|1] ./build.sh

          # SOC=mt7981 BOARD=${device_branch} MULTI_LAYOUT=1 ./build.sh

          echo -e "========== Build Finished =========="
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Setup output
        id: output
        working-directory: ${{ env.path_output }}
        if: ${{ steps.copy.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          rm -rf packages
          ls -al ./

          echo -e "timestamp=$(date +"%y%m%d")" >> ${GITHUB_OUTPUT}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: "[release.md] Record release.md"
        id: record
        working-directory: ${{ env.path_openwrt }}
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        run: |
          echo -e "Current working directory: $(pwd)"

          touch ${release_md}

          # 记录Clone源码的分支
          echo -e "\n### U-Boot Branch" >> ${release_md}
          echo -e "\n- [${repo_name}](${repo_target})" >> ${release_md}

          # 记录编译完成时间
          echo -e "\n### Build Time" >> ${release_md}
          echo -e "\n- $(date +"%Y-%m-%d %H:%M:%S %z")" >> ${release_md}

          # 记录Output bin文件
          echo -e "\n### Tested or NOT\n\n" >> ${release_md}
          for file in ${path_output}/*.bin
          do
            if [[ ! -d "${file}" ]]
            then
              echo -e "- [ ] $(basename "${file}")" >> ${release_md}
            fi
          done

      - name: Upload OpenWrt to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.output.outputs.status }} == 'success' && !cancelled()
        env:
          timestamp: ${{ steps.output.outputs.timestamp }}
          # release_md: ${{ steps.record.outputs.record }}
        with:
          name: "${{ env.openwrt_branch }}_${{ env.device_branch }}_${{ env.timestamp }}"
          tag: "${{ env.openwrt_branch }}"
          artifacts: "${{ env.path_output }}/*"
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: "${{ secrets.GITHUB_TOKEN }}"
          bodyFile: "${{ env.release_md }}"
          body: ""

      - name: Clear workspace
        id: clearwork
        working-directory: ${{ env.path_build }}
        run: |
          echo -e "Current working directory: $(pwd)"
          rm -rf ./* 2>/dev/null
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}
